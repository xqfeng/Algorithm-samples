6. Merge Intervals
Medium

Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.

Analysis and Solution
Here the issue is to merge interval.
To iterator all intervals for merging, need O(n2) 
we can sort it first, then merge it one by one.

CODE
class Solution {
public:
    struct intervalcmp {
      bool operator() (const vector<int> & elemfirst, const vector<int> &elemsec)
      {
        if(elemfirst[0] == elemsec[0]) return elemfirst[1]<elemsec[1];
        else
        return elemfirst[0]<elemsec[0];
      }
    };
      vector<vector<int>> merge(vector<vector<int>>& intervals)
      {
        vector< vector<int> > Re;
        if(intervals.size()<2) return intervals;
        std::sort(intervals.begin(), intervals.end(), intervalcmp()); 
        for(int idx = 0; idx<intervals.size()-1; idx++){
          if(intervals[idx][1]<intervals[idx+1][0] || intervals[idx][0]>intervals[idx+1][1])
            Re.push_back(intervals[idx]);
          else{
            intervals[idx+1][0] = min(intervals[idx][0], intervals[idx+1][0]);
            intervals[idx+1][1] = max(intervals[idx][1], intervals[idx+1][1]);
          }
        }
        Re.push_back(intervals[intervals.size()-1]);
        return Re;  
      }
};

SUMMARY
   The time complexity is O(nlgn), space complexity is o(n).
