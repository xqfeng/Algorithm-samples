Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]

Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].

NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.

Analysis.
no algorithm for this issue if no runtime is considered.
1) no new vector for return, need to erase and insert intervals. it operates in a vector and take times.
class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        int idx = 0;
        int s = newInterval[0], e = newInterval[1];
        while(idx < intervals.size()){
            if(s < intervals[idx][0] ){
                if(e < intervals[idx][0]) {
                    intervals.insert( intervals.begin()+idx, newInterval);
                    break;
                } 
                else {
                    if(e > intervals[idx][1]) {
                        int orgsize = intervals.size();
                        intervals.erase(intervals.begin()+idx);
                        if( idx == orgsize-1) {
                            intervals.push_back(newInterval);
                            break;
                        }
                    }
                    else {
                        intervals[idx][0] = s;
                        break;
                    }
                }
            }
            else{
                if(s > intervals[idx][1]) {
                    idx++;
                }
                else{
                    if(e <= intervals[idx][1]) break;
                    else {
                        newInterval[0] = s = intervals[idx][0];
                        intervals.erase(intervals.begin()+idx);
                    }
                }
            }
        }
        if(idx == intervals.size()){
            intervals.push_back(newInterval);
        } 
        return intervals;
    }
};

Solution 2
return a new vector. only push is used. space more time less.

class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        if(intervals.empty()) {
            intervals.push_back(newInterval);
            return intervals;
        }
        
        vector<vector<int>> res;
        int idx = 0;
        int s = newInterval[0], e = newInterval[1];
        while(idx < intervals.size()){
            while(idx < intervals.size()&&s>intervals[idx][1]) {
                res.push_back(intervals[idx]);
                idx++;
            }
            while(idx < intervals.size()&&(!(e<intervals[idx][0]||s>intervals[idx][1]))){
               newInterval[0] = s = min(s,intervals[idx][0]);
               newInterval[1] = e = max(e,intervals[idx][1]);
               idx++;
            }
            res.push_back(newInterval);
            while(idx<intervals.size()){
                res.push_back(intervals[idx]);
                idx++;
            }
        }
        return res;
    }
};

