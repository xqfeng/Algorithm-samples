281. Zigzag Iterator
Medium

Given two 1d vectors, implement an iterator to return their elements alternately.

Example:

Input:
v1 = [1,2]
v2 = [3,4,5,6] 

Output: [1,3,2,4,5,6]

Explanation: By calling next repeatedly until hasNext returns false, 
             the order of elements returned by next should be: [1,3,2,4,5,6].

Follow up: What if you are given k 1d vectors? How well can your code be extended to such cases?

Clarification for the follow up question:
The "Zigzag" order is not clearly defined and is ambiguous for k > 2 cases. If "Zigzag" does not look right to you, replace "Zigzag" with "Cyclic". For example:

Input:
[1,2,3]
[4,5,6,7]
[8,9]

Output: [1,4,8,2,5,9,3,6,7].


Analysis & Solution
To mimic the iterator, we can use mod to decide which vevtor will be the target iterator. so does k vectors.

class ZigzagIterator {
public:
    ZigzagIterator(vector<int>& v1, vector<int>& v2):m_id1(0),m_id2(0){
       m_v1 = v1;
        m_v2 = v2;
    }

    int next() {
        if(hasNext()){
          if(m_id1>=m_v1.size()) return m_v2[m_id2++];
          if(m_id2>=m_v2.size()) return m_v1[m_id1++];
          return (m_id1+m_id2)%2?m_v2[m_id2++]:m_v1[m_id1++];
        }
        else
            return INT_MAX;
    }

    bool hasNext() {
        return m_id1+m_id2<m_v1.size()+m_v2.size();
        
    }
    private:
    vector<int>m_v1;
    vector<int>m_v2;
    int m_id1;
    int m_id2;
};

/**
 * Your ZigzagIterator object will be instantiated and called as such:
 * ZigzagIterator i(v1, v2);
 * while (i.hasNext()) cout << i.next();
 */
