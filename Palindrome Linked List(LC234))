234. Palindrome Linked List
Easy

Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false

Example 2:

Input: 1->2->2->1
Output: true

Follow up:
Could you do it in O(n) time and O(1) space?

Analysis and Solution

For this issue, need to find the middle element and reverse it as two parts.
To find the middle elements, fast and slow pointer can be used to find it.

To reverse the list, there is three pointers need to use in travesal or iterator.

CODE
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        //find the mid and reverse it to compare.
         //find the mid and reverse it to compare.
      if(!head || !head->next) return true;
      if(!head->next->next) return head->val == head->next->val;

      ListNode *fast = head, *slow = head;
      while(fast && fast->next && fast->next->next){
         slow = slow->next;
         fast = fast->next->next;
      }
      
      ListNode *newtail = slow->next;
      slow->next = NULL;
      ListNode *pnext = newtail->next;
      newtail->next = NULL;

      while(pnext){
         ListNode*node = pnext->next;
         pnext->next = newtail;
         newtail = pnext;
         pnext = node;
      }


      while(newtail&&head){
         if(newtail->val!= head->val ) return false;
         newtail = newtail->next;
         head = head->next;
      }
      return true;

    }
};
