34. Find First and Last Position of Element in Sorted Array
Medium

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]


Analysis and solution
  Its easy to search the first target by binary search.
  then find the first element which is less or equal than the first target.
  need to check the return idx if needed.
  
  class Solution {
public:
    int findT(vector<int>& nums, int s, int target){
        //1,1 1;
        int e = nums.size()-1, m = 0;
        while(s<e){
            m = s + (e-s)/2;
            if(nums[m]>=target) e = m;
            else s = m+1;
        }
        return e;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int>re(2,-1);
        if(nums.empty() ) return re;
        if(nums.size() == 1){
            if(nums[0]!=target) return re;
            re[0] = re[1] = 0;
            return re;
        } 
        int first = findT(nums,0,target);
        if(nums[first] != target) return re;
        re[0] = first;
        int second=findT(nums, first+1, target+1);
        if(nums[second] == target) re[1] = second;
        else
            re[1] = second-1;
        return re;
    }
};
