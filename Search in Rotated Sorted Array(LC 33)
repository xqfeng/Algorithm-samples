Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Analysis and Solution
To find the target, need binary search for time complexity of log(n).
it's hard to passed all test cases.
in each condition, we need to find the reverse sort. need to notice the condtion with = .

Solution and corner testcases.
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left = 0, right = nums.size()-1, mid = 0;
        while(left<=right){
            mid = left + (right-left)/2;
            if(nums[mid] == target) return mid;
            else if(nums[mid]> target){
                if(target<nums[left] && nums[mid] >= nums[left])
                    left = mid+1;
                else
                    right = mid-1;
            }
            else{
                if(target>=nums[left] && nums[mid] < nums[left])
                    right = mid-1;
                else
                    left = mid+1;
            }
        }
        return -1;
    }
};

corner test case
[1 3] t = 1
[3 1] t = 3
[5 1 3] t = 5

if(nums[mid] > target), the reverse sort is target<nums[left] && nums[mid] >= nums[left]

if(nums[mid] < target ), the reverse sort is target>=nums[left] && nums[mid] < nums[left]
