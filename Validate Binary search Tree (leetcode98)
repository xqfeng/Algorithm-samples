98. Validate Binary Search Tree

Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

    The left subtree of a node contains only nodes with keys less than the node's key.
    The right subtree of a node contains only nodes with keys greater than the node's key.
    Both the left and right subtrees must also be binary search trees.

 

Example 1:

    2
   / \
  1   3

Input: [2,1,3]
Output: true

Example 2:

    5
   / \
  1   4
     / \
    3   6

Input: [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.

Solution
   To validate the BST, every node should satisfied that its left value less than root and right node value larger than root.
   use divide and conque to pass the value level by level with iterator.
   
 SOlution:
 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBST(TreeNode* node, long max, long min)
    {
        if(!node) return true;
        if(node->val >= max || node->val <= min ) return false;
        return isBST(node->left, node->val, min) && isBST(node->right, max, node->val);
            
    }
    bool isValidBST(TreeNode* root) {
        if(!root) return true;
        return isBST(root, numeric_limits<long>::max(), numeric_limits<long>::min());
    }
};
