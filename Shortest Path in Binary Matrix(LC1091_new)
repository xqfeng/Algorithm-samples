In an N by N square grid, each cell is either empty (0) or blocked (1).

A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:

    Adjacent cells C_i and C_{i+1} are connected 8-directionally (ie., they are different and share an edge or corner)
    C_1 is at location (0, 0) (ie. has value grid[0][0])
    C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])
    If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).

Return the length of the shortest such clear path from top-left to bottom-right.  If such a path does not exist, return -1.

 

Example 1:

Input: [[0,1],[1,0]]
Output: 2

Example 2:

Input: [[0,0,0],[1,1,0],[1,1,0]]
Output: 4

 

Note:

    1 <= grid.length == grid[0].length <= 100
    grid[r][c] is 0 or 1

Analysis & Solution
To find the shortest path, BSF use queue and set is enough.
and priority queue is perfect.

class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        if(grid.empty()||grid[0][0]!=0) return -1;
        int n = grid.size();
        grid[0][0] = -1;
        //BFS
        set<pair<int,int>> visit({make_pair(0,0)});
        queue<pair<int,int>>sch({make_pair(0,0)});
        vector<pair<int,int>> dirs({make_pair(-1,-1), make_pair(-1,0), make_pair(-1,1), make_pair(0,-1), make_pair(0,1), make_pair(1,-1), make_pair(1,0), make_pair(1,1)});
        while(!sch.empty()){
            pair<int,int> node = sch.front();
            sch.pop();
            int baseval = -1* grid[node.first][node.second];
            for(auto it : dirs){
                int x = node.first + it.first;
                int y = node.second + it.second;
                if(x>=0&&y>=0&&x<n && y<n &&grid[x][y]<=0){
                    int curval = -1*grid[x][y];
                    grid[x][y] = curval == 0? -1*(baseval+1): -1*min(baseval+1,curval);
                    if(!visit.count(make_pair(x,y))){
                        sch.push(make_pair(x,y));
                        visit.insert(make_pair(x,y));
                    }
                }
            }
        }
        return grid[n-1][n-1]<0?-1*grid[n-1][n-1]:-1;
    }
};
