Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

You may assume no duplicate exists in the array.

Example 1:

Input: [3,4,5,1,2] 
Output: 1

Example 2:

Input: [4,5,6,7,0,1,2]
Output: 0

Analysis & Solution.

Basic theory.
It's about binary search.
To coding binary search with no bug, three conditions need to be satisfied.
1)  the array should contained all elments sorted. no exception.
2)  to check the middle index in three sum to make sure no dead loop.
3)  if the target must be in the array, the while(left < right ) can iterator all elemets.
     Otherwise,  while(left<=right) is needed to iterator all elements.
     

Solution
The array is sorted with two parts, the point is to check the setting of mid in each check.
class Solution {
public:
    int findMin(vector<int>& nums) {
        int left = 0, right = nums.size()-1, mid = 0;
        while(left<right){
            mid = left+(right-left)/2;
            if(nums[mid] < nums[left]) {
                right = mid;
            }
            else {
                if(nums[mid]>nums[right])
                    left = mid+1;
                else 
                    right = mid;
            }
        }
        return nums[left];
    }
};
